import {MessageProducer} from "../message/MessageProducer";
import {Message} from "../message/Message"
import {MessageListener} from "../message/MessageListener";
import {MessageHandler} from "../message/MessageHandler";

import SymTabStack from "SymTabStacklocation";
import SymTabFactory from "SymTabFactorylocation";

import {Token} from "./Token";
import {Scanner} from "./Scanner";

/**
 * <h1>Parser</h1>
 *
 * <p>A language-independent framework class.  This abstract parser class
 * will be implemented by language-specific subclasses.</p>
 *
 * <p>Copyright (c) 2009 by Ronald Mak</p>
 * <p>For instructional purposes only.  No warranties.</p>
 */
export abstract class Parser implements MessageProducer {
    protected static symTabStack = SymTabFactory.createSymTabStack();        // symbol table stack
    protected static messageHandler = new MessageHandler();  // message handler delegate
    protected scanner : Scanner;  // scanner used with this parser

    /**
     * Constructor.
     * @param scanner the scanner to be used with this parser.
     */
    protected constructor(scanner:Scanner) {
        this.scanner = scanner;
    }

    /**
     * Getter.
     * @return the scanner used by this parser.
     */
    public getScanner() : Scanner {
        return this.scanner;
    }

    /**
     * Getter.
     * @return the symbol table stack generated by this parser.
     */
    public getSymTabStack() : SymTabStack {
        return Parser.symTabStack;
    }

    /**
     * Getter.
     * @return the message handler.
     */
    public getMessageHandler() : MessageHandler {
        return Parser.messageHandler;
    }

    /**
     * Parse a source program and generate the intermediate code and the symbol
     * table.  To be implemented by a language-specific parser subclass.
     * @throws Exception if an error occurred.
     */
    public abstract parse() : void

    /**
     * Return the number of syntax errors found by the parser.
     * To be implemented by a language-specific parser subclass.
     * @return the error count.
     */
    public abstract getErrorCount();

    /**
     * Call the scanner's currentToken() method.
     * @return the current token.
     */
    public currentToken() : Token {
        return this.scanner.getCurrentToken();
    }

    /**
     * Call the scanner's nextToken() method.
     * @return the next token.
     * @throws Exception if an error occurred.
     */
    public nextToken() : Token {
        return this.scanner.nextToken();
    }

    /**
     * Add a parser message listener.
     * @param listener the message listener to add.
     */
    public addMessageListener(listener : MessageListener) : void {
        Parser.messageHandler.addListener(listener);
    }

    /**
     * Remove a parser message listener.
     * @param listener the message listener to remove.
     */
    public removeMessageListener(listener : MessageListener) : void {
        Parser.messageHandler.removeListener(listener);
    }

    /**
     * Notify listeners after setting the message.
     * @param message the message to set.
     */
    public sendMessage(message : Message) : void {
        Parser.messageHandler.sendMessage(message);
    }
}
